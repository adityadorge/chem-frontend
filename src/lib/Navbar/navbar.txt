<script lang="ts">
    import { onMount, onDestroy } from "svelte";
    import { page } from '$app/stores';
    import CardsSection from "$lib/Testing_Component/CardsSection/CardsSection.svelte";
    import Filter from "$lib/Testing_Component/Filter/Filter.svelte";
    import TestCardsSection from "$lib/Testing_Component/TestCardsSection/TestCardsSection.svelte";
    import Navbar from "$lib/Navbar/Navbar.svelte";

    let searchTerm: string = "";
    let showSubcategories: boolean = false;

    interface Category {
        image_url: string;
        category_name: string;
        description: string;
        info: string;
        id: number;
    }

    interface Subcategory {
        id: number;
        category_name: string;
        description: string;
        info: string;
        image_url: string;
        parent: number;
    }

    interface Test {
        id: number;
        test_name: string;
        image_url: string;
        test_description: string;
        test_price: number;
    }

    let categories: Category[] = [];
    let allSubcategories: Subcategory[] = [];
    let selectedCategory: Category | null = null;
    let selectedSubcategory: Subcategory | null = null;
    let subcategories: Subcategory[] = [];
    let tests: Test[] = [];

    $: categoryId = $page.url.searchParams.get('category');

    // Fetch all categories and all subcategories on mount
    async function fetchCategoriesAndSubcategories() {
        const response = await fetch("http://localhost:8000/app1/categories/");
        categories = await response.json();

        let subs: Subcategory[] = [];
        for (const cat of categories) {
            const subRes = await fetch(`http://localhost:8000/app1/categories/${cat.id}/subcategories/`);
            const subData = await subRes.json();
            // Add parent reference to each subcategory
            subs = subs.concat(subData.map((s: any) => ({ ...s, parent: cat.id })));
        }
        allSubcategories = subs;
    }

    // Fetch tests for a category or subcategory
    async function fetchTestsForCategory(categoryId: number) {
        const test_response = await fetch(
            `http://localhost:8000/app1/categories/${categoryId}/tests/`,
        );
        tests = await test_response.json();
    }

    // Main logic: update selection and fetch data based on URL param
    async function updateSelectionFromUrl() {
        selectedCategory = null;
        selectedSubcategory = null;
        subcategories = [];
        tests = [];

        if (!categoryId) return;

        // Try to find as parent category
        const cat = categories.find(c => c.id === Number(categoryId));
        if (cat) {
            selectedCategory = cat;
            subcategories = allSubcategories.filter(s => s.parent === cat.id);
            await fetchTestsForCategory(cat.id);
            return;
        }

        // Try to find as subcategory
        const sub = allSubcategories.find(s => s.id === Number(categoryId));
        if (sub) {
            selectedSubcategory = sub;
            selectedCategory = categories.find(c => c.id === sub.parent) ?? null;
            subcategories = [sub];
            await fetchTestsForCategory(sub.id);
            return;
        }
    }

    // Fetch everything on mount, then update selection
    onMount(async () => {
        await fetchCategoriesAndSubcategories();
        await updateSelectionFromUrl();
        window.addEventListener("popstate", updateSelectionFromUrl);
    });

    onDestroy(() => {
        window.removeEventListener("popstate", updateSelectionFromUrl);
    });

    // Reactively update when categoryId or data changes
    $: if (categoryId && categories.length && allSubcategories.length) {
        updateSelectionFromUrl();
    }
</script>

<div class="testpage-container">
    <Filter
        bind:searchTerm
        onSearch={(term) => (searchTerm = term)}
        {categories}
        {subcategories}
        on:filter={e => {
            selectedCategory = categories.find(c => c.category_name === e.detail.category) ?? null;
        }}
    />
</div>

<main class="card-container">
    {#if categories.length > 0 && !selectedCategory && !selectedSubcategory}
        <!-- Show all parent categories -->
        {#each categories
            .filter((category) => category.category_name
                    .toLowerCase()
                    .includes(searchTerm.toLowerCase()))
            .sort((a, b) => {
                const aStarts = a.category_name.toLowerCase().startsWith(searchTerm.toLowerCase());
                const bStarts = b.category_name.toLowerCase().startsWith(searchTerm.toLowerCase());
                if (aStarts && !bStarts) return -1;
                if (!aStarts && bStarts) return 1;
                return a.category_name.localeCompare(b.category_name);
            }) as category}
            <CardsSection
                icon={category.image_url}
                title={category.category_name}
                description={category.description}
                info={category.info}
                category={category}
                {showSubcategories}
            />
        {/each}
    {/if}

    {#if subcategories.length > 0 && selectedCategory && !selectedSubcategory}
        <!-- Show subcategories for selected parent -->
        {#each subcategories
            .sort((a, b) => {
                const aStarts = a.category_name.toLowerCase().startsWith(searchTerm.toLowerCase());
                const bStarts = b.category_name.toLowerCase().startsWith(searchTerm.toLowerCase());
                if (aStarts && !bStarts) return -1;
                if (!aStarts && bStarts) return 1;
                return a.category_name.localeCompare(b.category_name);
            }) as subcategory}
            <CardsSection
                icon={subcategory.image_url}
                title={subcategory.category_name}
                description={subcategory.description}
                info={subcategory.info}
                category={subcategory}
                {showSubcategories}
            />
        {/each}
    {/if}

    {#if selectedSubcategory}
        <!-- Show only the selected subcategory card -->
        <CardsSection
            icon={selectedSubcategory.image_url}
            title={selectedSubcategory.category_name}
            description={selectedSubcategory.description}
            info={selectedSubcategory.info}
            category={selectedSubcategory}
            {showSubcategories}
        />
    {/if}

    {#if tests.length > 0 && (selectedCategory || selectedSubcategory)}
        {#each tests
            .filter(test => test.test_name.toLowerCase().includes(searchTerm.toLowerCase()))
            .sort((a, b) =>
                b.test_name.toLowerCase().startsWith(searchTerm.toLowerCase()) ? 1 :
                a.test_name.toLowerCase().startsWith(searchTerm.toLowerCase()) ? -1 : 0
            ) as test}
            <TestCardsSection
                icon={test.image_url}
                title={test.test_name}
                description={test.test_description}
                info={`Price: â‚¹${test.test_price}`}
                {test}
            />
        {/each}
    {/if}
</main>
